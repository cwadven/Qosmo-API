openapi: 3.0.0
info:
  title: API
  version: 1.0.0
  description: API
servers:
  - url: http://127.0.0.1:8000
paths:
  /v1/member/login:
    post:
      tags:
        - Member
      summary: Member login
      description: Normal Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: admin
              required:
                - username
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDY3OTMzMTJ9.YoSa8QjqZ8jUUhMWHzsNTsrgMt5YmxQuey0vBwTKV6s"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTA5MTJ9.8l9dcqj63c1RJfE8Bkb2X_eqs4TCn7qcAxI3PvjeqP4"
        "400":
          description: |
            Login failed<br>
            [ status_code ENUM ]<br>
            missing-mandatory-parameter<br>
            invalid-username-or-password<br>
            [ errors ENUM ]<br>
            username<br>
            password<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/member/social-login:
    post:
      tags:
        - Member
      summary: Member social login
      description: Social Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - token
              properties:
                provider:
                  type: integer
                  enum: [2, 3, 4] # 2: KAKAO, 3: NAVER, 4: GOOGLE
                  example: 2
                token:
                  type: string
                  example: "gyYwO9GsLD30O1T7Sg"
      responses:
        "200":
          description: Social login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDY3OTMzMTJ9.YoSa8QjqZ8jUUhMWHzsNTsrgMt5YmxQuey0vBwTKV6s"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTA5MTJ9.8l9dcqj63c1RJfE8Bkb2X_eqs4TCn7qcAxI3PvjeqP4"
        "400":
          description: |
            Social Login failed<br>
            [ status_code ENUM ]<br>
            missing-mandatory-parameter<br>
            social-token-error<br>
            [ errors ENUM ]<br>
            provider<br>
            token<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/member/social-sign-up:
    post:
      tags:
        - Member
      summary: Member social signup
      description: Social signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - token
                - jobs_info
              properties:
                provider:
                  type: integer
                  enum: [2, 3, 4] # 2: KAKAO, 3: NAVER, 4: GOOGLE
                  example: 2
                token:
                  type: string
                  example: "gyYwO9GsLD30O1T7Sg"
                jobs_info:
                  type: array
                  nullable: true
                  items:
                    type: object
                    properties:
                      job_id:
                        type: integer
                        example: 1
                      start_date:
                        type: string
                        example: "2024-05-01"
                      end_date:
                        type: string
                        nullable: true
                        example: "2024-06-30"

      responses:
        "200":
          description: Social signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDY3OTMzMTJ9.YoSa8QjqZ8jUUhMWHzsNTsrgMt5YmxQuey0vBwTKV6s"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTA5MTJ9.8l9dcqj63c1RJfE8Bkb2X_eqs4TCn7qcAxI3PvjeqP4"
        "400":
          description: |
            Social Login failed<br>
            [ status_code ENUM ]<br>
            missing-mandatory-parameter<br>
            social-token-error<br>
            [ errors ENUM ]<br>
            provider<br>
            token<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/member/refresh-token:
    post:
      tags:
        - Member
      summary: Refresh access token
      description: Refreshes the access token using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTI1NTZ9.PVuMlaXns3mUW9QYWuD1qa0Et66i1A0RgLby78hs90c"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDY3OTQ5NTZ9.u9aHwyOhd_7arlbDGgmo-2j9LqKU3WK7VH5P0A6Q5C8"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6MSwibWVtYmVyX2lkIjoxLCJleHAiOjE3MDczOTI1NTZ9.PVuMlaXns3mUW9QYWuD1qa0Et66i1A0RgLby78hs90c"
        "400":
          description: |
            Refresh Token failed<br>
            [ status_code ENUM ]<br>
            missing-mandatory-parameter<br>
            [ errors ENUM ]<br>
            refresh_token<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "401":
          description: |
            Refresh Token failed<br>
            [ status_code ENUM ]<br>
            invalid-refresh-token<br>
            no-member-token<br>
            [ errors ENUM ]<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/member/guest-token:
    post:
      tags:
        - Member
      summary: Generate guest token
      description: Generates a new access token and refresh token for a guest user
      responses:
        "200":
          description: Tokens generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6NCwibWVtYmVyX2lkIjpudWxsLCJleHAiOjE3MDY3OTU0MDJ9.OrdHI8qt6bVx343K6yg5wqmHSfGZ_c_t4GKFPdJ3Khg"
                  refresh_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJndWVzdF9pZCI6NCwibWVtYmVyX2lkIjpudWxsLCJleHAiOjE3MDczOTMwMDJ9.TJw6jktUuwWmgsc1MBmAtNKe15ASsLzJ4pgPNGtQX3g"

  /v1/member/sign-up-validation:
    post:
      tags:
        - Member
      summary: Validate user registration information
      description: Validates the given user registration information for uniqueness and conformity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - nickname
                - password1
                - password2
              properties:
                email:
                  type: string
                  format: email
                  example: "test@naver.com"
                nickname:
                  type: string
                  example: "test"
                password1:
                  type: string
                  example: "testtest"
                password2:
                  type: string
                  example: "testtest"
      responses:
        "200":
          description: Validation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
        "400":
          description: |
            SignUp Validation failed<br>
            [ status_code ENUM ]<br>
            missing-mandatory-parameter<br>
            invalid-sign-up-field-value<br>
            [ errors ENUM ]<br>
            username<br>
            email<br>
            nickname<br>
            password1<br>
            password2<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/member/sign-up-check:
    post:
      tags:
        - Member
      summary: Send verification code to email
      description: Validates user input and sends a verification code to the user's email if the input is valid.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - nickname
                - password2
              properties:
                email:
                  type: string
                  format: email
                  example: "test@naver.com"
                nickname:
                  type: string
                  example: "nickname"
                password2:
                  type: string
                  example: "password2"
      responses:
        "200":
          description: Verification code sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "인증번호를 이메일로 전송했습니다."

        "400":
          description: |
            Error sending verification code or invalid input<br>
            [ status_code ENUM ]<br>
            missing-mandatory-parameter<br>
            sending-email-token-error<br>
            [ errors ENUM ]<br>
            email<br>
            username<br>
            nickname<br>
            password1<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/member/sign-up-validate-token:
    post:
      tags:
        - Member
      summary: Validate one-time token for email verification
      description: Validates the one-time token sent to the user's email as part of the registration process.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - one_time_token
              properties:
                email:
                  type: string
                  format: email
                  example: "test@naver.com"
                one_time_token:
                  type: string
                  example: "one_time_token"
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "회원가입에 성공했습니다."
        "400":
          description: |
            Validation error or registration failure<br>
            [ status_code ENUM ]<br>
            missing-mandatory-parameter<br>
            member-creation-fail<br>
            email-token-macro-error<br>
            invalid-email-token<br>
            email-token-expired<br>
            [ errors ENUM ]<br>
            email<br>
            one_time_token<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/product/point:
    get:
      tags:
        - Product
      summary: List points products with pagination
      description: Retrieve a paginated list of points products.
      parameters:
        - in: query
          name: page
          required: true
          schema:
            type: integer
            default: 1
          description: Page number of the product listing.
        - in: query
          name: size
          required: true
          schema:
            type: integer
            default: 20
          description: Number of products per page.
      responses:
        "200":
          description: A list of points products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: integer
                          example: 1
                        product_type:
                          type: string
                          example: "POINT"
                        title:
                          type: string
                          example: "G-point 1000"
                        description:
                          type: string
                          example: "G-point 1000"
                        price:
                          type: integer
                          example: 1000
                        point:
                          type: integer
                          example: 1000
                        is_sold_out:
                          type: boolean
                          example: false
                        bought_count:
                          type: integer
                          example: 0
                        review_count:
                          type: integer
                          example: 0
                        review_rate:
                          type: number
                          format: float
                          example: 0.0

  /v1/payment/product/buy/kakao:
    post:
      tags:
        - Kakao Payment
      summary: Purchase a product using Kakao Pay
      description: Initiates a product purchase transaction using Kakao Pay.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
                - product_type
                - quantity
                - payment_type
                - order_phone_number
              properties:
                product_id:
                  type: integer
                  example: 1
                product_type:
                  type: string
                  enum: [POINT]
                  example: "POINT"
                quantity:
                  type: integer
                  example: 10
                payment_type:
                  type: string
                  enum: [KAKAO]
                  example: "KAKAO"
                order_phone_number:
                  type: string
                  example: "01074686889"
      responses:
        "200":
          description: Purchase initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tid:
                    type: string
                    example: "T5bef4ed1c025b0f886f"
                  next_redirect_app_url:
                    type: string
                    example: "https://online-pay.kakao.com/mockup/v1/1061874fa483485aeaf2f25cc35faf7651fafc55fb5aedccbc5a3b38f2639146/aInfo"
                  next_redirect_mobile_url:
                    type: string
                    example: "https://online-pay.kakao.com/mockup/v1/1061874fa483485aeaf2f25cc35faf7651fafc55fb5aedccbc5a3b38f2639146/mInfo"
                  next_redirect_pc_url:
                    type: string
                    example: "https://online-pay.kakao.com/mockup/v1/1061874fa483485aeaf2f25cc35faf7651fafc55fb5aedccbc5a3b38f2639146/info"
        "400":
          description: Error due to invalid input or token format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid_token_format:
                  value:
                    message: "잘못된 토큰 형식입니다."
                invalid_input:
                  value:
                    message: "입력값을 다시 확인해주세요."

  /v1/payment/product/approve/kakao/{order_id}:
    get:
      tags:
        - Kakao Payment
      summary: Approve Kakao Pay payment
      description: Finalizes the payment process for an order using Kakao Pay.
      parameters:
        - in: path
          name: order_id
          required: true
          schema:
            type: string
          description: The order ID to be approved.
        - in: query
          name: pg_token
          required: true
          schema:
            type: string
          description: The pg_token obtained from Kakao Pay.
      responses:
        "200":
          description: Payment approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "결제가 완료되었습니다."
        "400":
          description: Error due to invalid order or payment failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                non_existent_order:
                  value:
                    message: "존재하지 않는 주문입니다"
                payment_failure:
                  value:
                    message: "카카오페이 결제에 실패하였습니다."

  /v1/payment/product/cancel/kakao/{order_token}:
    post:
      tags:
        - Kakao Payment
      summary: Cancel Kakao Pay payment
      description: Cancels a payment process for an order using Kakao Pay.
      parameters:
        - in: path
          name: order_token
          required: true
          schema:
            type: string
          description: The order token of the payment to be canceled.
      responses:
        "200":
          description: Payment canceled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "결제가 취소되었습니다."
        "400":
          description: Error due to invalid input or other issues
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid_input:
                  value:
                    message: "입력값을 다시 확인해주세요."
                non_existent_order:
                  value:
                    message: "존재하지 않는 주문입니다."
                already_cancelled:
                  value:
                    message: "이미 취소된 주문입니다."
                invalid_order_state:
                  value:
                    message: "주문의 상태가 유효하지 않습니다."
                kakao_pay_cancellation_failure:
                  value:
                    message: "카카오페이 결제 취소에 실패하였습니다."

  /v1/common/health-check:
    get:
      tags:
        - Common
      summary: Health Check API
      description: To check health check
      responses:
        "200":
          description: Health Check successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OK"

  /v1/common/image/{constance_type}/{transaction_pk}/url:
    post:
      tags:
        - Common
      summary: Give Presigned Url
      description: To upadte aws S3 image
      parameters:
        - in: path
          name: constance_type
          required: true
          schema:
            type: string
            enum: ["member-image"]
          description: Type of constance_type
        - in: path
          name: transaction_pk
          required: true
          schema:
            type: string
          description: Type of constance_type pk
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - file_name
              properties:
                file_name:
                  type: string
                  description: "파일 이름 확장자까지 요"
                  example: "test.png"
      responses:
        "200":
          description: Created Presigned URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://s3-bucket-url.com"
                  data:
                    type: object
                    properties:
                      key:
                        type: string
                        example: "project-image/1/test.png"
                      x-amz-algorithm:
                        type: string
                        example: "AWS4-HMAC-SHA256"
                      x-amz-credential:
                        type: string
                        example: "......./20240720/ap-northeast-2/s3/aws4_request"
                      x-amz-date:
                        type: string
                        example: "20240720T054525Z"
                      policy:
                        type: string
                        example: "eyJleHBpcmF0aW9uIjogIjIwMjQtMDctMjBUMDY6MDI6MDVaIiwgImNvbmRpdGlvbnMiOiBbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsIDAsIDEwNDg1NzYwXSwgeyJidWNrZXQiOiAic2lwbGUtZGV2In0sIHsia2V5IjogInByb2plY3QtaW1hZ2UvMS90ZXN0LnBuZyJ9LCB7IngtYW16LWFsZ29yaXRobSI6ICJBV1M0LUhNQUMtU0hBMjU2In0sIHsieC1hbXotY3JlZGVudGlhbCI6ICJBS0lBMlVDM0ZHUTZaNU5NUkJZUS8yMDI0MDcyMC9hcC1ub3J0aGVhc3QtMi9zMy9hd3M0X3JlcXVlc3QifSwgeyJ4LWFtei1kYXRlIjogIjIwMjQwNzIwVDA1NDUyNVoifV19"
                      x-amz-signature:
                        type: string
                        example: "11a8ebd3d1b1c404c48d686727e96f1b6689906f87e89442487aa31db4b4b3eb"
        "401":
          description: No Auth
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotUserAuthPermission"

  /v1/common/file/{constance_type}/{transaction_pk}/url:
    post:
      tags:
        - Common
      summary: Give Presigned Url for Files
      description: To upload any file types to AWS S3
      parameters:
        - in: path
          name: constance_type
          required: true
          schema:
            type: string
            enum: ["answer_submit"]
          description: Type of constance_type
        - in: path
          name: transaction_pk
          required: true
          schema:
            type: string
          description: Type of constance_type pk
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - file_name
              properties:
                file_name:
                  type: string
                  description: "파일 이름 확장자까지 필요"
                  example: "report.pdf"
      responses:
        "200":
          description: Created Presigned URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        description: "파일 업로드 엔드포인트 URL"
                        example: "/v1/common/file/upload"
                      extra_data:
                        type: object
                        properties:
                          key:
                            type: string
                            example: "answer_submit/1/report.pdf"
                          x-amz-algorithm:
                            type: string
                            example: "AWS4-HMAC-SHA256"
                          x-amz-credential:
                            type: string
                            example: "......./20240720/ap-northeast-2/s3/aws4_request"
                          x-amz-date:
                            type: string
                            example: "20240720T054525Z"
                          policy:
                            type: string
                            example: "eyJleHBpcmF0aW9uIjogIjIwMjQtMDctMjBUMDY6MDI6MDVaIiwgImNvbmRpdGlvbnMiOiBbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsIDAsIDEwNDg1NzYwXSwgeyJidWNrZXQiOiAic2lwbGUtZGV2In0sIHsia2V5IjogInByb2plY3QtaW1hZ2UvMS90ZXN0LnBuZyJ9LCB7IngtYW16LWFsZ29yaXRobSI6ICJBV1M0LUhNQUMtU0hBMjU2In0sIHsieC1hbXotY3JlZGVudGlhbCI6ICJBS0lBMlVDM0ZHUTZaNU5NUkJZUS8yMDI0MDcyMC9hcC1ub3J0aGVhc3QtMi9zMy9hd3M0X3JlcXVlc3QifSwgeyJ4LWFtei1kYXRlIjogIjIwMjQwNzIwVDA1NDUyNVoifV19"
                          x-amz-signature:
                            type: string
                            example: "11a8ebd3d1b1c404c48d686727e96f1b6689906f87e89442487aa31db4b4b3eb"
        "401":
          description: No Auth
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotUserAuthPermission"

  /v1/common/file/upload:
    post:
      tags:
        - Common
      summary: Direct File Upload with Pre-signed URL data
      description: Upload file directly to server with pre-signed URL data and then to AWS S3
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - key
                - x-amz-algorithm
                - x-amz-credential
                - x-amz-date
                - policy
                - x-amz-signature
              properties:
                file:
                  type: string
                  format: binary
                  description: "File to upload"
                key:
                  type: string
                  description: "S3 key path"
                  example: "answer_submit/1/report.pdf"
                x-amz-algorithm:
                  type: string
                  description: "AWS algorithm"
                  example: "AWS4-HMAC-SHA256"
                x-amz-credential:
                  type: string
                  description: "AWS credential"
                  example: "......./20240720/ap-northeast-2/s3/aws4_request"
                x-amz-date:
                  type: string
                  description: "AWS date"
                  example: "20240720T054525Z"
                policy:
                  type: string
                  description: "AWS policy"
                  example: "eyJleHBpcmF0aW9uIjogIjIwMjQtMDctMjBUMDY6MDI6MDVaIiwgImNvbmRpdGlvbnMiOiBbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsIDAsIDEwNDg1NzYwXSwgeyJidWNrZXQiOiAic2lwbGUtZGV2In0sIHsia2V5IjogInByb2plY3QtaW1hZ2UvMS90ZXN0LnBuZyJ9LCB7IngtYW16LWFsZ29yaXRobSI6ICJBV1M0LUhNQUMtU0hBMjU2In0sIHsieC1hbXotY3JlZGVudGlhbCI6ICJBS0lBMlVDM0ZHUTZaNU5NUkJZUS8yMDI0MDcyMC9hcC1ub3J0aGVhc3QtMi9zMy9hd3M0X3JlcXVlc3QifSwgeyJ4LWFtei1kYXRlIjogIjIwMjQwNzIwVDA1NDUyNVoifV19"
                x-amz-signature:
                  type: string
                  description: "AWS signature"
                  example: "11a8ebd3d1b1c404c48d686727e96f1b6689906f87e89442487aa31db4b4b3eb"
      responses:
        "200":
          description: File Uploaded Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: "성공 메시지"
                        example: "파일 업로드 성공"
                      path:
                        type: string
                        description: "업로드된 파일의 전체 URL 경로"
                        example: "https://s3-bucket-url.com/answer_submit/1/report.pdf"
        "400":
          description: Missing Required Fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "file 필드가 필요합니다."
        "401":
          description: No Auth
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotUserAuthPermission"
        "500":
          description: Upload Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "파일 업로드에 실패했습니다."

  /v1/common/{constance_type}/type:
    get:
      tags:
        - Common
      summary: Get constance type
      description: Get constance type
      parameters:
        - in: path
          name: constance_type
          required: true
          schema:
            type: string
            enum: [""]
          description: Type of constance_type
      responses:
        "200":
          description: Health Check successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommonConstanceTypeItemsResponse"

  /v1/payment/product/fail/kakao/{order_token}:
    post:
      tags:
        - Kakao Payment
      summary: Simulate Kakao Pay payment failure
      description: Marks a payment process as failed for an order using Kakao Pay.
      parameters:
        - in: path
          name: order_token
          required: true
          schema:
            type: string
          description: The order token of the payment to mark as failed.
      responses:
        "200":
          description: Payment marked as failed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "결제가 실패되었습니다."
        "400":
          description: Error due to invalid input or non-existent order
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                invalid_input:
                  value:
                    message: "입력값을 다시 확인해주세요."
                non_existent_order:
                  value:
                    message: "존재하지 않는 주문입니다."

  /v1/promotion/banners:
    get:
      tags:
        - Promotion
      summary: Get promotion banners
      operationId: getPromotionBanners
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number of the banner list.
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of banners per page.
        - name: target_layer
          in: query
          required: true
          schema:
            type: string
            enum:
              - HOME_TOP
          description: The target layer of the banners to retrieve.
      responses:
        "200":
          description: A list of promotion banners.
          content:
            application/json:
              schema:
                type: object
                properties:
                  banners:
                    type: array
                    items:
                      type: object
                      properties:
                        banner_id:
                          type: integer
                          nullable: false
                        title:
                          type: string
                          nullable: true
                        title_font_color:
                          type: string
                          nullable: true
                        description:
                          type: string
                          nullable: true
                        description_font_color:
                          type: string
                          nullable: true
                        background_color:
                          type: string
                          nullable: true
                        big_image:
                          type: string
                          nullable: true
                        middle_image:
                          type: string
                          nullable: true
                        small_image:
                          type: string
                          nullable: true
                        action_page:
                          type: string
                          nullable: true
                        target_pk:
                          type: string
                          nullable: true
                        target_type:
                          type: string
                          nullable: true
                        external_target_url:
                          type: string
                          nullable: true
                        tags:
                          type: array
                          items:
                            type: string
              examples:
                example-1:
                  value:
                    {
                      "banners":
                        [
                          {
                            "banner_id": 1,
                            "title": "Example Banner Title",
                            "title_font_color": "#FFFFFF",
                            "description": "Example Description",
                            "description_font_color": "#EEEEEE",
                            "background_color": "#000000",
                            "big_image": "https://example.com/big_image.jpg",
                            "middle_image": "https://example.com/middle_image.jpg",
                            "small_image": "https://example.com/small_image.jpg",
                            "action_page": "https://example.com/action_page",
                            "target_pk": "123",
                            "target_type": "Product",
                            "external_target_url": "https://example.com/external_url",
                            "tags": ["test_tag"],
                          },
                        ],
                    }
        "400":
          description: Bad request, missing or invalid parameters.
          content:
            application/json:
              examples:
                missing_target_layer:
                  value: { "message": "입력값을 다시 확인해주세요." }
                invalid_target_layer:
                  value: { "message": "잘못된 target_layer 입니다." }

  /v1/map:
    get:
      tags:
        - Map
      summary: "전체 Map 목록 조회"
      description: |
        Map 목록을 페이지네이션하여 조회합니다.
      parameters:
        - name: next_cursor
          in: query
          description: base64로 인코딩된 커서 값
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 한 번에 가져올 개수
          required: false
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: 검색어
          required: false
          schema:
            type: string
        - name: order_by
          in: query
          description: 정렬 기준
          required: false
          schema:
            type: string
            enum: ["created_at", "subscriber_count"]
            default: "created_at"
      responses:
        "200":
          description: 성공적으로 Map 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      maps:
                        type: array
                        items:
                          $ref: "#/components/schemas/MapListItem"
                      next_cursor:
                        type: string
                        description: base64 인코딩된 다음 커서 값

  /v1/map/{map_id}:
    get:
      tags:
        - Map
      summary: "Map 상세 조회"
      description: |
        특정 Map의 상세 정보를 조회합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 Map 상세 정보를 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MapDetail"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/node/{node_id}:
    get:
      tags:
        - Node
      summary: "Node 상세 정보 조회"
      description: |
        특정 Node의 상세 정보를 조회합니다.
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 Node 상세 정보를 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/NodeDetail"
        "403":
          $ref: "#/components/responses/NodeForbiddenError"
        "404":
          $ref: "#/components/responses/NodeNotFoundError"

  /v1/question/{question_id}/answer/submit:
    post:
      tags:
        - Question
      summary: "Question 답변 제출"
      description: |
        특정 Question에 대한 답변을 제출합니다.
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answer:
                  type: string
                  example: "답변 내용"
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      file:
                        type: string
                        example: "s3/path/to/uploaded/file.html"
      responses:
        "201":
          description: 답변이 성공적으로 제출되었습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "20100000"
                  data:
                    $ref: "#/components/schemas/QuestionAnswerResponse"
        "400":
          $ref: "#/components/responses/QuestionAnswerValidationError"
        "403":
          $ref: "#/components/responses/QuestionAnswerForbiddenError"
        "404":
          $ref: "#/components/responses/QuestionNotFoundError"

  /v1/map-graph/node/{map_id}:
    get:
      tags:
        - MapGraph
      summary: "Map의 Node 목록 조회"
      description: |
        특정 Map에 속한 모든 Node의 위치와 상태 정보를 조회합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 Node 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      nodes:
                        type: array
                        items:
                          $ref: "#/components/schemas/Node"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/map-graph/node/{map_id}/member_play/{map_play_member_id}:
    get:
      tags:
        - MapGraph
      summary: "Map의 Node 목록 조회 (특정 멤버의 진행 상황 포함)"
      description: |
        특정 Map에 속한 모든 Node의 위치와 상태 정보를 조회하며, 특정 맵 플레이 멤버의 진행 상황을 포함합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
        - name: map_play_member_id
          in: path
          required: true
          schema:
            type: integer
          description: "진행 상황을 조회할 맵 플레이 멤버 ID"
      responses:
        "200":
          description: 성공적으로 Node 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      nodes:
                        type: array
                        items:
                          $ref: "#/components/schemas/Node"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/map-graph/arrow/{map_id}:
    get:
      tags:
        - MapGraph
      summary: "Map의 Arrow 목록 조회"
      description: |
        특정 Map에 속한 모든 Arrow의 연결 정보와 상태를 조회합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 Arrow 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    properties:
                      arrows:
                        type: array
                        items:
                          $ref: "#/components/schemas/Arrow"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/map-graph/arrow/{map_id}/member_play/{map_play_member_id}:
    get:
      tags:
        - MapGraph
      summary: "Map의 Arrow 목록 조회 (특정 멤버의 진행 상황 포함)"
      description: |
        특정 Map에 속한 모든 Arrow의 연결 정보와 상태를 조회하며, 특정 맵 플레이 멤버의 진행 상황을 포함합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
        - name: map_play_member_id
          in: path
          required: true
          schema:
            type: integer
          description: "진행 상황을 조회할 맵 플레이 멤버 ID"
      responses:
        "200":
          description: 성공적으로 Arrow 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    properties:
                      arrows:
                        type: array
                        items:
                          $ref: "#/components/schemas/Arrow"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/map-graph/meta/{map_id}:
    get:
      tags:
        - MapGraph
      summary: "Map 그래프 메타데이터 조회"
      description: |
        Map 그래프의 메타데이터를 조회합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 성공적으로 메타데이터를 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MapGraphMeta"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/map-graph/meta/{map_id}/member_play/{map_play_member_id}:
    get:
      tags:
        - MapGraph
      summary: "Map 그래프 메타데이터 조회 (특정 멤버의 진행 상황 포함)"
      description: |
        Map 그래프의 메타데이터를 조회하며, 특정 맵 플레이 멤버의 진행 상황을 포함합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
        - name: map_play_member_id
          in: path
          required: true
          schema:
            type: integer
          description: "진행 상황을 조회할 맵 플레이 멤버 ID"
      responses:
        "200":
          description: 성공적으로 메타데이터를 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MapGraphMeta"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/map/popular/daily:
    get:
      tags:
        - Map
      summary: "인기 일별 순"
      description: |
        인기 일별 순
      responses:
        "200":
          description: 인기 일별 순
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      maps:
                        type: array
                        items:
                          $ref: "#/components/schemas/MapListItem"

  /v1/map/popular/monthly:
    get:
      tags:
        - Map
      summary: "인기 월별 순"
      description: |
        인기 월별 순
      responses:
        "200":
          description: 인기 월별 순
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      maps:
                        type: array
                        items:
                          $ref: "#/components/schemas/MapListItem"

  /v1/map/subscribed:
    get:
      tags:
        - Map
      summary: "구독 중인 Map 목록 조회"
      description: |
        사용자가 구독 중인 Map 목록을 페이지네이션하여 조회합니다.
      parameters:
        - name: next_cursor
          in: query
          description: base64로 인코딩된 커서 값
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 한 번에 가져올 개수
          required: false
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: 성공적으로 구독 중인 Map 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      maps:
                        type: array
                        items:
                          $ref: "#/components/schemas/MapListItem"
                      next_cursor:
                        type: string
                        description: base64 인코딩된 다음 커서 값
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /v1/map/popular:
    get:
      tags:
        - Map
      summary: "인기 Map 목록 조회"
      description: |
        구독자 수 기준으로 상위 5개의 인기 Map 목록을 조회합니다.
      responses:
        "200":
          description: 성공적으로 인기 Map 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      maps:
                        type: array
                        items:
                          $ref: "#/components/schemas/MapListItem"
                        maxItems: 5
                        minItems: 5

  /v1/map/my:
    get:
      tags:
        - Map
      summary: "내가 작성한 Map 목록 조회"
      description: |
        사용자가 작성한 Map 목록을 페이지네이션하여 조회합니다.
      parameters:
        - name: next_cursor
          in: query
          description: base64로 인코딩된 커서 값
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: 한 번에 가져올 개수
          required: false
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: 성공적으로 구독 중인 Map 목록을 조회했습니다
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      maps:
                        type: array
                        items:
                          $ref: "#/components/schemas/MapListItem"
                      next_cursor:
                        type: string
                        description: base64 인코딩된 다음 커서 값
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /v1/subscription/map/{map_id}:
    post:
      tags:
        - Subscription
      summary: "구독하기"
      description: |
        특정 Map 을 구독합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 구독 완료
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example: {}
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"
    delete:
      tags:
        - Subscription
      summary: "구독 취소 하기"
      description: |
        특정 Map 을 구독 취소합니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 구독 취소
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example: { }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/MapNotFoundError"

  /v1/member/profile:
    get:
      tags:
        - Member
      summary: "내 프로필 조회"
      description: |
        로그인한 사용자의 프로필 정보를 조회합니다.
      responses:
        "200":
          description: 프로필 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MemberProfile"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    patch:
      tags:
        - Member
      summary: 프로필 정보 수정
      description: 로그인한 사용자의 프로필 정보를 수정합니다.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  example: "새로운닉네임"
                profile_image:
                  type: string
                  format: binary
                  description: "프로필 이미지 파일 (jpg, png, webp, gif 만 가능)"
      responses:
        "200":
          description: 프로필 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MemberProfile"
        "400":
          description: |
            프로필 수정 실패<br>
            [ status_code ENUM ]<br>
            invalid-profile-field-value<br>
            invalid-file-format<br>
            [ errors ENUM ]<br>
            nickname<br>
            profile_image<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /v1/play/map/<int:map_id>:
    get:
      tags:
        - MapPlay
      summary: "내가 참여 중인 플레이 목록 조회"
      description: |
        현재 로그인한 사용자가 참여 중인 플레이 목록을 조회합니다.
        탈퇴하지 않은(deactivated=False) 플레이만 조회됩니다.
      responses:
        "200":
          description: 플레이 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      plays:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: "우리 팀의 React 학습"
                            role:
                              type: string
                              enum: [participant, admin]
                              example: "participant"
                            joined_at:
                              type: string
                              format: date-time
                              example: "2024-02-05T14:23:00Z"
                            completed_node_count:
                              type: integer
                              example: 5
                            recent_activated_nodes:
                              type: array
                              items:
                                type: object
                                properties:
                                  node_id:
                                    type: integer
                                    example: 1
                                  node_name:
                                    type: string
                                    example: "Java 공부하기"
                                  activated_at:
                                    type: string
                                    format: date-time
                                    example: 2025-02-14T12:19:46.770995Z
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - MapPlay
      summary: "맵 플레이 생성"
      description: |
        특정 맵의 플레이를 생성합니다. 생성자는 자동으로 admin 권한을 가집니다.
      parameters:
        - name: map_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  example: "우리 팀의 React 학습"
      responses:
        "201":
          description: 플레이 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      map_play_id:
                        type: integer
                        example: 1
                      map_id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "우리 팀의 React 학습"
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
        "400":
          description: |
            플레이 생성 실패<br>
            [ status_code ENUM ]<br>
            INVALID_INPUT_CREATE_MAP_PLAY_ERROR_400<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: 맵을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: "#/components/responses/MapNotFoundError"

  /v1/play/{map_play_member_id}/invite-codes:
    get:
      tags:
        - MapPlay
      summary: "초대 코드 목록 조회"
      description: |
        플레이의 활성화된 초대 코드 목록을 조회합니다.
        admin만 조회할 수 있습니다.
      parameters:
        - name: map_play_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: 초대 코드 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      invite_codes:
                        type: array
                        items:
                          $ref: "#/components/schemas/MapPlayInviteCode"
        "403":
          description: |
            초대 코드 목록 조회 실패<br>
            [ status_code ENUM ]<br>
            play-admin-permission-denied<br>
            [ errors ]<br>
            - 해당 플레이의 admin만 이 작업을 수행할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - MapPlay
      summary: "초대 코드 생성"
      description: |
        플레이의 초대 코드를 생성합니다.
        admin만 생성할 수 있습니다.
      parameters:
        - name: map_play_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                max_uses:
                  type: integer
                  nullable: true
                  description: "최대 사용 횟수 (null인 경우 무제한)"
                  example: 10
                expired_at:
                  type: string
                  format: date-time
                  nullable: true
                  description: "만료일시 (null인 경우 무기한)"
      responses:
        "201":
          description: 초대 코드 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MapPlayInviteCode"
        "400":
          description: |
            초대 코드 생성 실패<br>
            [ status_code ENUM ]<br>
            INVALID_INPUT_CREATE_INVITE_CODE_ERROR_400<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            초대 코드 생성 실패<br>
            [ status_code ENUM ]<br>
            play-admin-permission-denied<br>
            [ errors ]<br>
            - 해당 플레이의 admin만 이 작업을 수행할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - MapPlay
      summary: "초대 코드 비활성화"
      description: |
        플레이의 초대 코드를 비활성화합니다.
        admin만 비활성화할 수 있습니다.
      parameters:
        - name: map_play_id
          in: path
          required: true
          schema:
            type: integer
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 초대 코드 비활성화 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example: {}
        "403":
          description: |
            초대 코드 비활성화 실패<br>
            [ status_code ENUM ]<br>
            play-admin-permission-denied<br>
            [ errors ]<br>
            - 해당 플레이의 admin만 이 작업을 수행할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |
            초대 코드 비활성화 실패<br>
            [ status_code ENUM ]<br>
            play-invite-code-not-found<br>
            [ errors ]<br>
            - 존재하지 않거나 이미 비활성화된 초대 코드입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/play/join/{code}:
    post:
      tags:
        - MapPlay
      summary: "초대 코드로 플레이 참여"
      description: |
        초대 코드를 사용하여 플레이에 참여합니다.
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: 플레이 참여 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MapPlayMember"
        "400":
          description: |
            플레이 참여 실패<br>
            [ status_code ENUM ]<br>
            play-invite-code-not-found<br>
            play-member-not-found<br>
            [ errors ]<br>
            - 존재하지 않거나 이미 비활성화된 초대 코드입니다.<br>
            - 초대 코드가 만료되었습니다.<br>
            - 초대 코드 사용 횟수를 초과했습니다.<br>
            - 이미 플레이 멤버입니다.<br>
            - 이 초대 코드로는 더 이상 참여할 수 없습니다.<br>
            - 이전에 추방된 이력이 있어 참여할 수 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/play/{map_play_member_id}/member/role:
    patch:
      tags:
        - MapPlay
      summary: "멤버 역할 변경"
      description: |
        플레이 멤버의 역할을 변경합니다. admin만 변경 가능합니다.
      parameters:
        - name: map_play_member_id
          in: path
          required: true
          schema:
            type: integer
          description: "역할을 변경할 맵 플레이 멤버 ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_role
              properties:
                new_role:
                  type: string
                  enum: [participant, admin]
                  example: "admin"
                reason:
                  type: string
                  nullable: true
                  example: "팀장으로 승진"
      responses:
        "200":
          description: 역할 변경 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/MapPlayMemberDTO"
        "400":
          description: |
            역할 변경 실패<br>
            [ status_code ENUM ]<br>
            INVALID_INPUT_CHANGE_ROLE_ERROR_400<br>
            play-member-not-found<br>
            play-last-admin<br>
            [ errors ]<br>
            - 존재하지 않거나 이미 비활성화된 멤버입니다.<br>
            - 이미 해당 역할입니다.<br>
            - 마지막 admin은 역할 변경할 수 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            역할 변경 실패<br>
            [ status_code ENUM ]<br>
            play-admin-permission-denied<br>
            [ errors ]<br>
            - 해당 플레이의 admin만 이 작업을 수행할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/play/{map_play_member_id}/member/ban:
    post:
      tags:
        - MapPlay
      summary: "멤버 추방"
      description: |
        플레이 멤버를 추방합니다. admin만 추방 가능합니다.
      parameters:
        - name: map_play_member_id
          in: path
          required: true
          schema:
            type: integer
          description: "추방할 맵 플레이 멤버 ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - banned_reason
              properties:
                banned_reason:
                  type: string
                  example: "부적절한 행동"
                invite_code_id:
                  type: integer
                  nullable: true
                  description: "특정 초대 코드로 추방 시 해당 코드로 재가입 불가"
      responses:
        "200":
          description: 추방 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      banned_at:
                        type: string
                        format: date-time
        "400":
          description: |
            추방 실패<br>
            [ status_code ENUM ]<br>
            INVALID_INPUT_BAN_MEMBER_ERROR_400<br>
            play-member-not-found<br>
            play-last-admin<br>
            [ errors ]<br>
            - 존재하지 않거나 이미 비활성화된 멤버입니다.<br>
            - 마지막 admin은 추방할 수 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            추방 실패<br>
            [ status_code ENUM ]<br>
            play-admin-permission-denied<br>
            [ errors ]<br>
            - 해당 플레이의 admin만 이 작업을 수행할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/play/{map_play_member_id}/member/self-deactivate:
    post:
      tags:
        - MapPlay
      summary: "맵 플레이 멤버 자발적 탈퇴"
      description: |
        플레이에서 탈퇴합니다.
        1. admin이 아닌 경우: 바로 탈퇴 가능
        2. admin인 경우:
           - 혼자만 있는 경우: 바로 탈퇴 가능
           - admin이 2명 이상인 경우: 바로 탈퇴 가능
           - 다른 멤버가 있고 admin이 혼자인 경우: admin 권한 위임 필요
      parameters:
        - name: map_play_member_id
          in: path
          required: true
          schema:
            type: integer
          description: "탈퇴할 맵 플레이 멤버 ID"
      responses:
        "200":
          description: 탈퇴 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    enum: [success]
                  data:
                    $ref: "#/components/schemas/MapPlayMemberDTO"
        "400":
          description: |
            탈퇴 실패<br>
            [ status_code ENUM ]<br>
            play-admin-deactivate<br>
            [ errors ]<br>
            - 다른 멤버가 있는 경우 admin 권한을 위임한 후에 탈퇴할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: |
            탈퇴 실패<br>
            [ status_code ENUM ]<br>
            play-member-not-found<br>
            [ errors ]<br>
            - 존재하지 않거나 이미 비활성화된 멤버입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/push/device-token:
    post:
      tags:
        - Push
      summary: "디바이스 토큰 등록/갱신"
      description: |
        푸시 알림을 위한 디바이스 토큰을 등록하거나 갱신합니다.
        이미 등록된 토큰인 경우 게스트 정보와 디바이스 타입이 갱신됩니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - device_type
              properties:
                token:
                  type: string
                  description: "Firebase 디바이스 토큰"
                  example: "eKh6HBU1..."
                device_type:
                  type: string
                  enum: [ios, android]
                  description: "디바이스 타입"
                  example: "ios"
      responses:
        "200":
          description: 토큰 등록/갱신 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: "등록된 디바이스 토큰"
                      device_type:
                        type: string
                        enum: [ios, android]
                        description: "디바이스 타입"
                      created_at:
                        type: string
                        format: date-time
                        description: "등록 일시"
        "400":
          description: |
            토큰 등록/갱신 실패<br>
            [ errors ]<br>
            - 토큰과 디바이스 타입은 필수입니다.<br>
            - 디바이스 타입은 ios 또는 android만 가능합니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            토큰 등록/갱신 실패<br>
            [ errors ]<br>
            - 게스트 정보가 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Push
      summary: "디바이스 토큰 비활성화"
      description: |
        푸시 알림을 위한 디바이스 토큰을 비활성화합니다.
        비활성화된 토큰으로는 더 이상 푸시 알림이 발송되지 않습니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: "비활성화할 Firebase 디바이스 토큰"
                  example: "eKh6HBU1..."
      responses:
        "200":
          description: 토큰 비활성화 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    enum: [success]
                  data:
                    type: object
        "400":
          description: |
            토큰 비활성화 실패<br>
            [ errors ]<br>
            - 토큰은 필수입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            토큰 비활성화 실패<br>
            [ errors ]<br>
            - 게스트 정보가 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/map/{map_id}/share:
    post:
      tags:
        - Map
      summary: Map 공유 링크 생성
      description: |
        Map의 공유 링크를 생성합니다.
        - private map인 경우 30분간 유효한 공유 링크가 생성됩니다.
        - public map인 경우에도 공유 링크가 생성되지만, 링크 없이도 접근 가능합니다.
      security:
        - jwt: []
      parameters:
        - name: map_id
          in: path
          description: Map ID
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: 공유 링크 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      share_key:
                        type: string
                        example: "1"
        '404':
          description: Map을 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: map-not-found
                  message:
                    type: string
                    example: Map을 찾을 수 없습니다.
                  errors:
                    type: object
                    example: {}

  /v1/map/share/{map_id}:
    get:
      tags:
        - Map
      summary: Map 공유 링크 검증
      description: |
        공유 링크를 통해 Map에 접근합니다.
        - public map인 경우 바로 접근 가능합니다.
        - private map인 경우 유효한 공유 키가 필요합니다.
        - 공유 키는 30분간 유효합니다.
      parameters:
        - name: map_id
          in: path
          description: 공유 키
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Map 상세 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/MapDetail'
        '404':
          description: Map을 찾을 수 없거나 접근 권한이 없음
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: map-not-found
                  message:
                    type: string
                    example: Map을 찾을 수 없거나 접근 권한이 없습니다.
                  errors:
                    type: object
                    example: {}

  /v1/play/{map_play_member_id}/members:
    get:
      tags:
        - MapPlay
      summary: Map Play 멤버 목록 조회
      description: |
        Map Play의 멤버 목록을 조회합니다.
        - 본인이 해당 플레이의 멤버인 경우에만 조회 가능합니다.
        - 멤버 목록은 역할(admin -> participant)과 생성일시 순으로 정렬됩니다.
      security:
        - BearerAuth: []
      parameters:
        - name: map_play_member_id
          in: path
          description: Map Play 멤버 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                type: object
                required:
                  - status_code
                  - data
                properties:
                  status_code:
                    type: string
                    description: "상태 코드"
                    example: "success"
                  data:
                    type: object
                    properties:
                      members:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: Map Play 멤버 ID
                              example: 1
                            member_info:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  description: 멤버 ID
                                  example: 1
                                nickname:
                                  type: string
                                  description: 멤버 닉네임
                                  example: "비니"
                            role:
                              type: string
                              description: 역할 (admin/participant)
                              example: "admin"
                            created_at:
                              type: string
                              format: date-time
                              description: 생성일시
                              example: "2024-02-05T14:30:00Z"
                            updated_at:
                              type: string
                              format: date-time
                              description: 수정일시
                              example: "2024-02-05T14:30:00Z"
        '403':
          description: 맵 플레이 멤버를 찾을 수 없음
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status_code
                  - errors
                properties:
                  message:
                    type: string
                    description: "에러 메시지"
                    example: "Map Play 멤버를 찾을 수 없습니다."
                  status_code:
                    type: string
                    description: "에러 코드"
                    example: "play-member-not-found"
                  errors:
                    type: object
                    nullable: true
                    additionalProperties:
                      type: array
                      items:
                        type: string
                    example: null

  /v1/play/{map_play_member_id}/management:
    put:
      tags:
        - MapPlay
      summary: Map Play 관리 (제목 수정)
      description: |
        Map Play의 제목을 수정합니다.
        - admin만 수정할 수 있습니다.
      security:
        - BearerAuth: []
      parameters:
        - name: map_play_member_id
          in: path
          description: Map Play 멤버 ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: 새로운 제목
                  example: "새로운 React 학습"
      responses:
        '200':
          description: 제목 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      map_play_id:
                        type: integer
                        example: 1
                      map_id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: "새로운 React 학습"
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
        '400':
          description: |
            제목 수정 실패<br>
            [ status_code ENUM ]<br>
            INVALID_INPUT_MANAGEMENT_ERROR_400<br>
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status_code
                  - errors
                properties:
                  message:
                    type: string
                    description: "에러 메시지"
                    example: "유효하지 않은 입력값입니다."
                  status_code:
                    type: string
                    description: "에러 코드"
                    example: "invalid-input"
                  errors:
                    type: object
                    nullable: true
                    additionalProperties:
                      type: array
                      items:
                        type: string
                    example:
                      title: ["제목은 필수입니다."]
        '403':
          description: |
            제목 수정 실패<br>
            [ status_code ENUM ]<br>
            play-admin-permission-denied<br>
            [ errors ]<br>
            - 해당 플레이의 admin만 이 작업을 수행할 수 있습니다.<br>
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status_code
                  - errors
                properties:
                  message:
                    type: string
                    description: "에러 메시지"
                    example: "해당 플레이의 admin만 이 작업을 수행할 수 있습니다."
                  status_code:
                    type: string
                    description: "에러 코드"
                    example: "play-admin-permission-denied"
                  errors:
                    type: object
                    nullable: true
                    additionalProperties:
                      type: array
                      items:
                        type: string
                    example: null

  /v1/map/{map_id}/feedback-answers:
    get:
      tags:
        - Map
      summary: Map 피드백 답변 목록 조회
      description: |
        Map의 피드백이 필요한/완료된 답변 목록을 조회합니다.
        - Map 생성자만 조회 가능합니다.
        - status 파라미터로 피드백 상태를 필터링할 수 있습니다.
        - 페이지네이션은 cursor 방식으로 구현되어 있습니다.
      security:
        - BearerAuth: []
      parameters:
        - name: map_id
          in: path
          description: Map ID
          required: true
          schema:
            type: integer
        - name: status
          in: query
          description: 피드백 상태 (pending - 대기중, completed - 완료)
          required: false
          schema:
            type: string
            enum: [pending, completed]
            default: pending
        - name: cursor
          in: query
          description: 페이지네이션 커서
          required: false
          schema:
            type: string
        - name: size
          in: query
          description: 페이지 크기
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 피드백 답변 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      answers:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: 답변 ID
                              example: 1
                            question:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  description: 문제 ID
                                  example: 1
                                title:
                                  type: string
                                  description: 문제 제목
                                  example: "React Hooks 이해하기"
                            member:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  description: 멤버 ID
                                  example: 1
                                nickname:
                                  type: string
                                  description: 멤버 닉네임
                                  example: "비니"
                            answer:
                              type: string
                              description: 답변 내용
                              example: "React Hooks는 ..."
                            files:
                              type: array
                              description: 첨부 파일 목록
                              items:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    description: 파일 ID
                                    example: 1
                                  name:
                                    type: string
                                    description: 파일 이름
                                    example: "file.pdf"
                                  file:
                                    type: string
                                    description: 파일 경로
                                    example: "s3/path/to/file.pdf"
                            submitted_at:
                              type: string
                              format: date-time
                              description: 제출 일시
                              example: "2024-02-05T14:30:00Z"
                      next_cursor:
                        type: string
                        nullable: true
                        description: 다음 페이지 커서
                        example: "eyJpZF9fZ3QiOiA1fQ=="
                      has_more:
                        type: boolean
                        description: 다음 페이지 존재 여부
                        example: true
        '400':
          description: |
            피드백 답변 목록 조회 실패<br>
            [ status_code ENUM ]<br>
            INVALID_INPUT_FEEDBACK_ANSWERS_ERROR_400<br>
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status_code
                  - errors
                properties:
                  message:
                    type: string
                    description: "에러 메시지"
                    example: "유효하지 않은 입력값입니다."
                  status_code:
                    type: string
                    description: "에러 코드"
                    example: "invalid-input"
                  errors:
                    type: object
                    nullable: true
                    additionalProperties:
                      type: array
                      items:
                        type: string
                    example:
                      status: ["유효하지 않은 상태값입니다."]
        '403':
          description: |
            피드백 답변 목록 조회 실패<br>
            [ status_code ENUM ]<br>
            map-owner-permission-denied<br>
            [ errors ]<br>
            - Map 생성자만 이 작업을 수행할 수 있습니다.<br>
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - status_code
                  - errors
                properties:
                  message:
                    type: string
                    description: "에러 메시지"
                    example: "Map 생성자만 이 작업을 수행할 수 있습니다."
                  status_code:
                    type: string
                    description: "에러 코드"
                    example: "map-owner-permission-denied"
                  errors:
                    type: object
                    nullable: true
                    additionalProperties:
                      type: array
                      items:
                        type: string
                    example: null

  /v1/question/user-question-answer/{user_question_answer_id}:
    get:
      tags:
        - Question
      summary: "사용자 문제 답변 상세 조회"
      description: |
        사용자의 문제 답변 상세 정보를 조회합니다.
        - 답변 작성자 본인 또는 Map 생성자만 조회 가능합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: user_question_answer_id
          in: path
          description: 조회할 답변 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 답변 상세 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 답변 ID
                        example: 1
                      question:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: 문제 ID
                            example: 1
                          title:
                            type: string
                            description: 문제 제목
                            example: "React Hooks 이해하기"
                          description:
                            type: string
                            description: 문제 설명
                            example: "React Hooks의 기본 개념과 사용법을 설명하세요."
                      member:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: 멤버 ID
                            example: 1
                          nickname:
                            type: string
                            description: 멤버 닉네임
                            example: "비니"
                      answer:
                        type: string
                        description: 답변 내용
                        example: "React Hooks는 ..."
                      files:
                        type: array
                        description: 첨부 파일 목록
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: 파일 ID
                              example: 1
                            name:
                              type: string
                              description: 파일 이름
                              example: "file.pdf"
                            file:
                              type: string
                              description: 파일 경로
                              example: "s3/path/to/file.pdf"
                      is_correct:
                        type: boolean
                        nullable: true
                        description: 정답 여부
                        example: true
                      feedback:
                        type: string
                        nullable: true
                        description: 피드백 내용
                        example: "잘 설명해주셨습니다."
                      reviewed_by:
                        type: object
                        nullable: true
                        properties:
                          id:
                            type: integer
                            description: 리뷰어 ID
                            example: 1
                          nickname:
                            type: string
                            description: 리뷰어 닉네임
                            example: "관리자"
                      reviewed_at:
                        type: string
                        format: date-time
                        nullable: true
                        description: 리뷰 일시
                        example: "2024-02-05T14:30:00Z"
                      submitted_at:
                        type: string
                        format: date-time
                        description: 제출 일시
                        example: "2024-02-05T14:30:00Z"
        '403':
          description: |
            답변 조회 실패<br>
            [ status_code ENUM ]<br>
            answer-permission-denied<br>
            [ errors ]<br>
            - 답변 작성자 본인 또는 Map 생성자만 조회할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: |
            답변 조회 실패<br>
            [ status_code ENUM ]<br>
            answer-not-found<br>
            [ errors ]<br>
            - 존재하지 않는 답변입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Question
      summary: "사용자 문제 답변 피드백 제출"
      description: |
        사용자의 문제 답변에 대한 피드백을 제출합니다.
        - Map 생성자만 피드백을 제출할 수 있습니다.
      security:
        - BearerAuth: []
      parameters:
        - name: user_question_answer_id
          in: path
          description: 피드백을 제출할 답변 ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - is_correct
                - feedback
              properties:
                is_correct:
                  type: boolean
                  description: 정답 여부
                  example: true
                feedback:
                  type: string
                  description: 피드백 내용
                  example: "잘 설명해주셨습니다."
      responses:
        '200':
          description: 피드백 제출 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 답변 ID
                        example: 1
                      is_correct:
                        type: boolean
                        description: 정답 여부
                        example: true
                      feedback:
                        type: string
                        description: 피드백 내용
                        example: "잘 설명해주셨습니다."
                      reviewed_by:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: 리뷰어 ID
                            example: 1
                          nickname:
                            type: string
                            description: 리뷰어 닉네임
                            example: "관리자"
                      reviewed_at:
                        type: string
                        format: date-time
                        description: 리뷰 일시
                        example: "2024-02-05T14:30:00Z"
        '400':
          description: |
            피드백 제출 실패<br>
            [ status_code ENUM ]<br>
            INVALID_INPUT_FEEDBACK_ERROR_400<br>
            [ errors ]<br>
            - is_correct와 feedback은 필수입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: |
            피드백 제출 실패<br>
            [ status_code ENUM ]<br>
            answer-permission-denied<br>
            [ errors ]<br>
            - Map 생성자만 피드백을 제출할 수 있습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: |
            피드백 제출 실패<br>
            [ status_code ENUM ]<br>
            answer-not-found<br>
            [ errors ]<br>
            - 존재하지 않는 답변입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/push/map-play-member/{map_play_member_id}:
    post:
      tags:
        - Push
      summary: "맵 플레이 멤버의 푸시 알림 설정 활성화"
      description: |
        맵 플레이 멤버의 푸시 알림 설정을 활성화합니다.
        - 해당 맵 플레이 멤버를 소유한 사용자만 설정 가능합니다.
        - 이미 활성화된 설정이 있으면 푸시 시간을 업데이트합니다.
        - 비활성화된 설정이 있으면 활성화합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: map_play_member_id
          in: path
          description: Map Play 멤버 ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                push_date:
                  type: string
                  format: date
                  nullable: true
                  example: "2024-01-01"
                  description: "푸시 알림을 보낼 날짜 (YYYY-MM-DD 형식)"
                push_time:
                  type: string
                  format: time
                  example: "18:30:00"
                  description: "푸시 알림을 보낼 시간 (HH:MM:SS 형식)"
                remind_info:
                  type: string
                  nullable: true
                  example: "집에 도착해서 먼저 짐 정리하기"
                  description: "추가 리마인드 정보"
                is_active:
                  type: boolean
                  description: "활성화 여부"
                  example: true
      responses:
        '200':
          description: 설정 활성화 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
        '403':
          description: |
            설정 활성화 실패<br>
            [ status_code ENUM ]<br>
            play-member-no-permission<br>
            [ errors ]<br>
            - 접근 권한이 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: |
            설정 활성화 실패<br>
            [ status_code ENUM ]<br>
            map-play-member-not-found<br>
            [ errors ]<br>
            - 존재하지 않는 맵 플레이 멤버입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/push/push-map-play-member/{push_map_play_member_id}:
    delete:
      tags:
        - Push
      summary: "푸시 맵 플레이 멤버 알림 설정 삭제"
      description: |
        푸시 맵 플레이 멤버 알림 설정을 완전히 삭제합니다.
        - PushMapPlayMember ID를 직접 지정하여 삭제합니다.
        - 해당 맵 플레이 멤버를 소유한 사용자만 삭제 가능합니다.
      security:
        - BearerAuth: []
      parameters:
        - name: push_map_play_member_id
          in: path
          description: Push Map Play 멤버 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
        '403':
          description: |
            삭제 실패<br>
            [ status_code ENUM ]<br>
            play-member-no-permission<br>
            [ errors ]<br>
            - 접근 권한이 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: |
            삭제 실패<br>
            [ status_code ENUM ]<br>
            push-map-play-member-not-found<br>
            [ errors ]<br>
            - 존재하지 않는 푸시 맵 플레이 멤버입니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/push/map-play-member/{map_play_member_id}/push-settings:
    get:
      tags:
        - Push
      summary: "특정 맵 플레이 멤버의 푸시 알림 설정 목록 조회"
      description: |
        특정 맵 플레이 멤버의 푸시 알림 설정 목록을 조회합니다.
        - 지정된 맵 플레이 멤버의 모든 활성화된 푸시 알림 설정을 반환합니다.
        - 각 설정에는 ID, 푸시 날짜/시간 등의 정보가 포함됩니다.
      security:
        - BearerAuth: []
      parameters:
        - name: map_play_member_id
          in: path
          description: "조회할 맵 플레이 멤버 ID"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      push_map_play_members:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: "푸시 맵 플레이 멤버 ID"
                              example: 1
                            push_date:
                              type: string
                              format: date
                              description: "푸시 발송 날짜"
                              example: "2023-07-15"
                            push_time:
                              type: string
                              format: time
                              description: "푸시 발송 시간"
                              example: "09:00:00"
                            remind_info:
                              type: string
                              nullable: true
                              description: "추가 리마인드 정보"
                              example: "집에 도착해서 먼저 짐 정리하기"
                            is_active:
                              type: boolean
                              description: "활성화 여부"
                              example: true
                            created_at:
                              type: string
                              format: date-time
                              description: "생성 일시"
                              example: "2023-07-10T14:30:00Z"
                            updated_at:
                              type: string
                              format: date-time
                              description: "수정 일시"
                              example: "2023-07-12T15:45:00Z"
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: 맵 플레이 멤버를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/push/member/push-settings:
    get:
      tags:
        - Push
      summary: "사용자의 모든 활성화된 푸시 알림 설정 목록 조회"
      description: |
        현재 로그인한 사용자의 모든 활성화된 푸시 알림 설정 목록을 조회합니다.
        - 사용자의 모든 활성화된 푸시 알림 설정을 반환합니다.
        - 각 설정에는 ID, 맵 이름, 맵 플레이 제목, 푸시 날짜/시간 등의 정보가 포함됩니다.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      push_map_play_members:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: "푸시 맵 플레이 멤버 ID"
                              example: 1
                            map_play_member_id:
                              type: integer
                              description: "맵 플레이 멤버 ID"
                              example: 123
                            map_id:
                              type: integer
                              description: "맵 ID"
                              example: 456
                            map_play_id:
                              type: integer
                              description: "맵 플레이 ID"
                              example: 789
                            push_date:
                              type: string
                              format: date
                              description: "푸시 발송 날짜"
                              example: "2023-07-15"
                            push_time:
                              type: string
                              format: time
                              description: "푸시 발송 시간"
                              example: "09:00:00"
                            remind_info:
                              type: string
                              nullable: true
                              description: "추가 리마인드 정보"
                              example: "집에 도착해서 먼저 짐 정리하기"
                            is_active:
                              type: boolean
                              description: "활성화 여부"
                              example: true
                            map_name:
                              type: string
                              description: "맵 이름"
                              example: "서울 여행 코스"
                            map_play_title:
                              type: string
                              description: "맵 플레이 제목"
                              example: "2024 서울 여행"
                            created_at:
                              type: string
                              format: date-time
                              description: "생성 일시"
                              example: "2023-07-10T14:30:00Z"
                            updated_at:
                              type: string
                              format: date-time
                              description: "수정 일시"
                              example: "2023-07-12T15:45:00Z"
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/push/push-settings/active:
    put:
      tags:
        - Push
      summary: 여러 푸시 알림 설정의 활성화 상태 일괄 업데이트
      description: 여러 푸시 맵 플레이 멤버의 활성화 상태를 한 번에 업데이트합니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - is_active
                - push_map_play_member_ids
              properties:
                is_active:
                  type: boolean
                  example: true
                  description: 설정할 활성화 상태
                push_map_play_member_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
                  description: 업데이트할 푸시 맵 플레이 멤버 ID 목록
      responses:
        "200":
          description: 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  status_code:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example: {}
        "400":
          description: |
            요청 오류<br>
            [ status_code ENUM ]<br>
            INVALID_PUT_PUSH_MAP_PLAY_MEMBER_INPUT_DATA_400<br>
            [ errors ENUM ]<br>
            is_active<br>
            push_map_play_member_ids<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: |
            권한 오류<br>
            [ status_code ENUM ]<br>
            play-member-no-permission<br>
            [ errors ]<br>
            - 접근 권한이 없습니다.<br>
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  schemas:
    NotUserAuthPermission:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: "오류 메시지"
          example: "로그인 후 이용해주세요."

    CommonConstanceTypeItemsResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CommonConstanceTypeItem"

    CommonConstanceTypeItem:
      type: object
      required:
        - id
        - name
        - display_name
      properties:
        id:
          type: integer
          description: type pk
          example: 1
        name:
          type: string
          description: searching for wording
          example: Frontend
        display_name:
          type: string
          description: What user will see
          example: "프론트엔더"

    ErrorSchema:
      type: object
      properties:
        status_code:
          type: string
        message:
          type: string
        errors:
          type: object
          additionalProperties: true

    NodeErrorSchema:
      allOf:
        - $ref: "#/components/schemas/ErrorSchema"
        - type: object
          example:
            status_code: "40430001"
            message: "Node를 찾을 수 없습니다"
            errors: {}

    QuestionErrorSchema:
      allOf:
        - $ref: "#/components/schemas/ErrorSchema"
        - type: object
          example:
            status_code: "40440001"
            message: "Question을 찾을 수 없습니다"
            errors: {}

    QuestionAnswerValidationSchema:
      allOf:
        - $ref: "#/components/schemas/ErrorSchema"
        - type: object
          properties:
            errors:
              type: object
              properties:
                answer:
                  type: array
                  items:
                    type: string
                files:
                  type: array
                  items:
                    type: string
          example:
            status_code: "40040002"
            message: "필수 이 누락되었습니다"
            errors:
              answer: ["답변을 입력해주세요"]
              files: ["파일을 첨부해주세요"]

    ErrorResponse:
      type: object
      required:
        - message
        - status_code
        - errors
      properties:
        message:
          type: string
          description: "큰 에러 범주"
          example: "유효하지 않은 입력값입니다."
        status_code:
          type: string
          description: "큰 에러 코드"
          example: "invalid-username-or-password"
        errors:
          type: object
          nullable: true
          additionalProperties:
            type: array
            items:
              type: string
          example:
            field1: ["에러 메시지1"]
            field2: ["에러 메시지2"]

    MapListItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "React 학습 로드맵"
        description:
          type: string
          example: "React 개발자가 되기 위한 단계별 학습 로드맵입니다"
        subscriber_count:
          type: integer
          example: 2345
        play_count:
          type: integer
          example: 2345
        is_private:
          type: boolean
          example: false
        is_subscribed:
          type: boolean
          example: false
        icon_image:
          type: string
          example: "https://s3/path/to/image.jpg"
        background_image:
          type: string
          example: "https://s3/path/to/image.jpg"
        created_by:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nickname:
              type: string
              example: "Alice"
        created_at:
          type: string
          format: date-time
          example: "2024-01-20T00:00:00Z"

    MapDetail:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "React 학습 로드맵"
        description:
          type: string
          example: "React 개발자가 되기 위한 단계별 학습 로드맵입니다"
        subscriber_count:
          type: integer
          example: 2345
        play_count:
          type: integer
          example: 2345
        is_private:
          type: boolean
          example: false
        is_subscribed:
          type: boolean
          example: false
        is_owner:
          type: boolean
          example: true
        total_node_count:
          type: integer
          example: 10
        icon_image:
          type: string
          example: "https://s3/path/to/image.jpg"
        background_image:
          type: string
          example: "s3/path/to/image.jpg"
        created_by:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nickname:
              type: string
              example: "Alice"
        created_at:
          type: string
          format: date-time
          example: "2024-01-20T00:00:00Z"

    NodeDetail:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "HTML 기초"
        title:
          type: string
          example: "HTML 마스터"
        description:
          type: string
          example: "HTML의 기본 구조와 시맨틱 태그를 이해하고 활용할 수 있습니다"
        background_image:
          type: string
          example: "s3/path/to/image.jpg"
        status:
          type: string
          example: "active"
        statistic:
          type: object
          properties:
            activated_member_count:
              type: integer
              example: 10
            completed_member_count:
              type: integer
              example: 10
        active_rules:
          type: array
          items:
            $ref: "#/components/schemas/NodeCompleteRule"

    NodeCompleteRule:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "HTML 기초 학습하기"
        progress:
          type: object
          properties:
            completed_questions:
              type: integer
              example: 2
            total_questions:
              type: integer
              example: 5
            percentage:
              type: integer
              example: 40
        questions:
          type: array
          items:
            $ref: "#/components/schemas/NodeQuestion"

    NodeQuestion:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "HTML 기초 이해하기"
        description:
          type: string
          example: "HTML의 기본 구조와 태그들의 의미를 이해합니다"
        question_files:
          type: array
          items:
            $ref: "#/components/schemas/QuestionFile"
        status:
          type: string
          enum: ["completed", "in_progress", "locked"]
          example: "completed"
        by_node_id:
          type: integer
          example: 1
        answer_submit_with_text:
          type: boolean
          example: true
        answer_submit_with_file:
          type: boolean
          example: true
        my_answers:
          type: array
          items:
            $ref: "#/components/schemas/UserQuestionAnswer"

    UserQuestionAnswer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        answer:
          type: string
          example: "제출한 답변 내용"
        is_correct:
          type: boolean
          nullable: true
          example: true
        feedback:
          type: string
          example: "관리자의 피드백 내용"
        reviewed_by:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nickname:
              type: string
              example: "Admin"
        reviewed_at:
          type: string
          format: date-time
          example: "2024-01-21T00:00:00Z"
        submitted_at:
          type: string
          format: date-time
          example: "2024-01-20T00:00:00Z"
        files:
          type: array
          items:
            $ref: "#/components/schemas/QuestionAnswerFile"

    QuestionFile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        file:
          type: string
          example: "s3/path/to/file.html"

    QuestionAnswerFile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        file:
          type: string
          example: "s3/path/to/file.html"

    QuestionAnswerResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        answer:
          type: string
          example: "답변 내용"
        submitted_at:
          type: string
          format: date-time
          example: "2024-01-20T00:00:00Z"
        validation_type:
          type: string
          enum: ["auto", "manual"]
          example: "auto"
        status:
          type: string
          enum: ["completed", "failed", "pending_review"]
          example: "completed"
        feedback:
          type: string
          nullable: true
          example: "정답입니다! HTML의 기본 구조를 잘 이해하고 있습니다."
        going_to_in_progress_node_ids:
          type: array
          items:
            type: integer
          example: [2, 3]
        completed_node_ids:
          type: array
          items:
              type: integer
          example: [4, 5]
        completed_arrow_ids:
          type: array
          items:
              type: integer
          example: [1, 2]

    MapGraphMeta:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "React 학습 로드맵"
        description:
          type: string
          example: "React의 기초부터 심화까지 학습하는 로드맵입니다"
        stats:
          type: object
          properties:
            total_nodes:
              type: integer
              example: 9
            completed_nodes:
              type: integer
              example: 3
            learning_period:
              type: object
              properties:
                start_date:
                  type: string
                  format: date-time
                  example: "2024-01-01T00:00:00Z"
                days:
                  type: integer
                  example: 60
            total_questions:
              type: integer
              example: 25
            solved_questions:
              type: integer
              example: 12
        layout:
          type: object
          properties:
            width:
              type: integer
              example: 3000
            height:
              type: integer
              example: 3000
            grid_size:
              type: integer
              example: 20
        theme:
          type: object
          properties:
            background_color:
              type: string
              example: "#f8f9fa"
            grid_color:
              type: string
              example: "#ddd"
            node:
              type: object
              properties:
                completed:
                  $ref: "#/components/schemas/NodeTheme"
                in_progress:
                  $ref: "#/components/schemas/NodeTheme"
                locked:
                  $ref: "#/components/schemas/NodeTheme"
            arrow:
              type: object
              properties:
                completed:
                  type: string
                  example: "#4CAF50"
                locked:
                  type: string
                  example: "#666666"
        version:
          type: string
          example: "20240301120532"

    NodeTheme:
      type: object
      properties:
        background:
          type: string
          example: "#FFFFFF"
        border:
          type: string
          example: "#4CAF50"
        text:
          type: string
          example: "#4CAF50"
        icon:
          type: string
          example: "checkmark-circle"

    Node:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "HTML 기초"
        position_x:
          type: number
          example: 100
        position_y:
          type: number
          example: 100
        width:
          type: number
          example: 100
        height:
          type: number
          example: 100
        status:
          type: string
          enum: ["completed", "in_progress", "locked"]
          example: "completed"

    Arrow:
      type: object
      properties:
        id:
          type: integer
          example: 1
        start_node_id:
          type: integer
          example: 1
        end_node_id:
          type: integer
          example: 2
        active_rule_id:
          type: integer
          example: 1
        status:
          type: string
          enum: ["completed", "in_progress", "locked"]
          example: "completed"

    CompleteRule:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "HTML 기초 완료"
        target_nodes:
          type: array
          items:
            type: integer
          example: [2]

    MemberProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nickname:
          type: string
          example: "John"
        profile_image:
          type: string
          example: "s3/path/to/profile/image.jpg"
        subscribed_map_count:
          type: integer
          example: 5

    MapPlayInviteCode:
      type: object
      properties:
        id:
          type: integer
          example: 1
        map_play_id:
          type: integer
          example: 1
        code:
          type: string
          example: "MAP-0001-240205-1423-AB12"
        created_by_id:
          type: integer
          example: 1
        max_uses:
          type: integer
          nullable: true
          example: 10
        current_uses:
          type: integer
          example: 5
        expired_at:
          type: string
          format: date-time
          nullable: true
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MapPlayMember:
      type: object
      properties:
        id:
          type: integer
          example: 1
        map_play_id:
          type: integer
          example: 1
        member_id:
          type: integer
          example: 1
        role:
          type: string
          enum: [participant, admin]
          example: "participant"
        deactivated:
          type: boolean
          example: false
        deactivated_reason:
          type: string
          enum: [self_deactivated, banned]
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MapPlayMemberDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        map_play_id:
          type: integer
          example: 1
        member_id:
          type: integer
          example: 1
        role:
          type: string
          enum: [participant, admin]
          example: "participant"
        deactivated:
          type: boolean
          example: false
        deactivated_reason:
          type: string
          enum: [self_deactivated, banned]
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PlayAdminDeactivateError:
      type: object
      properties:
        status_code:
          type: string
          example: "ERROR"
        error:
          type: object
          properties:
            code:
              type: string
              example: "play-admin-deactivate"
            summary:
              type: string
              example: "다른 멤버가 있는 경우 admin 권한을 위임한 후에 탈퇴할 수 있습니다."

    PlayMemberNotFoundError:
      type: object
      properties:
        status_code:
          type: string
          example: "ERROR"
        error:
          type: object
          properties:
            code:
              type: string
              example: "play-member-not-found"
            summary:
              type: string
              example: "존재하지 않거나 이미 탈퇴한 멤버입니다."

    DeviceToken:
      type: object
      properties:
        id:
          type: integer
          description: "디바이스 토큰 ID"
        guest_id:
          type: integer
          description: "토큰 소유자 게스트 ID"
        token:
          type: string
          description: "Firebase 디바이스 토큰"
        device_type:
          type: string
          enum: [ios, android]
          description: "디바이스 타입"
        is_active:
          type: boolean
          description: "활성화 여부"
        created_at:
          type: string
          format: date-time
          description: "생성일시"
        updated_at:
          type: string
          format: date-time
          description: "수정일시"

  responses:
    UnauthorizedError:
      description: 인증되지 않은 사용자
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: string
                example: "login-required"
              message:
                type: string
                example: "로그인이 필요합니다."
              errors:
                type: object
                example: {}

    MapNotFoundError:
      description: 존재하지 않는 Map
      content:
        application/json:
          schema:
            type: object
            properties:
              status_code:
                type: string
                example: "40420001"
              message:
                type: string
                example: "Map을 찾을 수 없습니다"
              errors:
                type: object
                example: {}

    NodeForbiddenError:
      description: Node 접근 권한이 없음
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NodeErrorSchema"
          example:
            status_code: "40330001"
            message: "해당 Node에 접근할 수 없습니다"
            errors: {}

    NodeNotFoundError:
      description: 존재하지 않는 Node
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NodeErrorSchema"

    QuestionNotFoundError:
      description: 존재하지 않는 Question
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QuestionErrorSchema"

    QuestionAnswerValidationError:
      description: Question 답변 유효성 검증 실패
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QuestionAnswerValidationSchema"

    QuestionAnswerForbiddenError:
      description: Question 답변 권한이 없음
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorSchema"
          example:
            status_code: "40340001"
            message: "답변을 제출할 권한이 없습니다"
            errors: {}
